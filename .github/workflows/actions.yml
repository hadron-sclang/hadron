name: CI
on:
  push:
  pull_request:
jobs:
  cpp-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cpp-linter/cpp-linter-action@v2
        id: linter
        with:
          style: file
          files-changed-only: false
          # TODO: enable clang-tidy checks
          tidy-checks: -*
      - name: Linter Failed
        if: steps.linter.outputs.checks-failed > 0
        run: exit 1

  test-linux-x86_64:
    needs: cpp-linter
    runs-on: ubuntu-latest
    env:
      BUILD_PATH: ${{ github.workspace }}/build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes ninja-build cmake bison ragel gperf
          mkdir -p $BUILD_PATH/install-ext/{lib,bin}
          cd $BUILD_PATH/install-ext/lib
          curl -O https://www.antlr.org/download/antlr-4.11.1-complete.jar
          cd $BUILD_PATH
          echo '#!/bin/bash
            java -Xmx500M -cp "${BUILD_PATH}/install-ext/lib/antlr-4.11.1-complete.jar:$CLASSPATH" org.antlr.v4.Tool $@' > $BUILD_PATH/install-ext/bin/antlr4
          chmod u+x $BUILD_PATH/install-ext/bin/antlr4
      - name: configure
        run: |
          cd $BUILD_PATH
          cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DANTLR_COMMAND_LINE=$BUILD_PATH/install-ext/bin/antlr4 ..
      - name: build
        run: |
          cd $BUILD_PATH
          cmake --build .
      - name: test
        run: |
          cd $BUILD_PATH
          cmake --build . --target=test

  test-macos-x86_64:
    needs: cpp-linter
    runs-on: macos-latest
    env:
      BUILD_PATH: ${{ github.workspace }}/build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: install dependencies
        run: |
          brew install cmake bison gperf ragel antlr ninja
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH
          cmake -GNinja -DCMAKE_BUILD_TYPE=Debug ..
      - name: build
        run: |
          cd $BUILD_PATH
          cmake --build .
      - name: test
        run: |
          cd $BUILD_PATH
          cmake --build . --target=test

  test-windows-x86_64:
    needs: cpp-linter
    runs-on: windows-latest
    env:
      BUILD_PATH: ${{ github.workspace }}\build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: install dependencies
        shell: bash
        run: |
          vcpkg install --triplet x64-windows ragel gperf
          mkdir -p $BUILD_PATH/install-ext/{lib,bin}
          cd $BUILD_PATH/install-ext/lib
          curl -O https://www.antlr.org/download/antlr-4.11.1-complete.jar
          cd $BUILD_PATH
          export NEWER_JAVA=`where java | tail -n1`
          echo "\"$NEWER_JAVA\" -cp \"$BUILD_PATH\\install-ext\\lib\\antlr-4.11.1-complete.jar\" org.antlr.v4.Tool %*" > $BUILD_PATH/install-ext/bin/antlr4.bat
          echo "batch file:"
          cat $BUILD_PATH/install-ext/bin/antlr4.bat
          echo "end of batch file"
      - name: configure
        shell: bash
        run: |
          cd $BUILD_PATH
          cmake -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake -DANTLR_COMMAND_LINE=$BUILD_PATH/install-ext/bin/antlr4.bat -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_BUILD_TYPE=Debug ..
      - name: build
        shell: bash
        run: |
          cd $BUILD_PATH
          cmake --build . --config=DEBUG
      - name: test
        shell: bash
        run: |
          cd $BUILD_PATH
          cmake --build . --config=Debug --target=test

